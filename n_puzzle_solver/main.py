#!/usr/bin/env python3
"""
N-Puzzle Solver - Interface Principal Completa v3.0 

Sistema completo para resolu√ß√£o de N-Puzzle com implementa√ß√£o de todos os requisitos:

PARTE 1 - BUSCAS SEM INFORMA√á√ÉO:
- Puzzles 8 e 15 n√∫meros
- Algoritmos: BFS, DFS, IDS
- Formula√ß√£o completa do problema
- Gera√ß√£o e exibi√ß√£o da √°rvore de busca
- An√°lise comparativa detalhada

PARTE 2 - BUSCAS COM INFORMA√á√ÉO:
- Puzzles 8, 15 e 24 n√∫meros
- Algoritmos: A*, Greedy Search
- Heur√≠sticas: Manhattan, Pe√ßas Fora do Lugar, Conflito Linear
- Visualiza√ß√£o de √°rvores de busca
- M√©tricas e an√°lises de performance

CARACTER√çSTICAS T√âCNICAS:
- Entrada: configura√ß√£o inicial do tabuleiro (lista/matriz nxn)  
- Sa√≠da: sequ√™ncia de movimentos, n√∫mero de passos, tempo de execu√ß√£o, √°rvore de busca
- Operadores: mover para cima, baixo, esquerda, direita (custo uniforme = 1)
- Visualiza√ß√£o em tempo real e an√°lise comparativa
- Gera√ß√£o de gr√°ficos e tabelas de performance

Uso: python main.py
"""

import json
import time
import os
import sys
import subprocess
from typing import List, Dict, Any, Optional, Tuple
from pathlib import Path
from datetime import datetime

def auto_install_dependencies():
    """Instala automaticamente as depend√™ncias necess√°rias (modo silencioso)."""
    required_packages = [
        'pandas>=1.5.0',
        'matplotlib>=3.6.0', 
        'seaborn>=0.12.0',
        'numpy>=1.24.0'
    ]
    
    for package in required_packages:
        package_name = package.split('>=')[0]
        try:
            __import__(package_name)
        except ImportError:
            try:
                subprocess.check_call([
                    sys.executable, '-m', 'pip', 'install', package, '--quiet'
                ], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
            except subprocess.CalledProcessError:
                return False
    
    return True

# Executa instala√ß√£o autom√°tica das depend√™ncias (modo silencioso)
if auto_install_dependencies():
    # Agora importa as bibliotecas com seguran√ßa
    try:
        import pandas as pd
        import matplotlib.pyplot as plt
        import seaborn as sns
        import numpy as np
        VISUALIZATION_AVAILABLE = True
    except ImportError:
        VISUALIZATION_AVAILABLE = False
        
        # Define mocks para compatibilidade
        class MockVisualization:
            def __getattr__(self, name):
                def mock_method(*args, **kwargs):
                    return None
                return mock_method
        
        pd = MockVisualization()
        plt = MockVisualization()
        sns = MockVisualization()
        np = MockVisualization()
else:
    VISUALIZATION_AVAILABLE = False
    
    # Define mocks para compatibilidade
    class MockVisualization:
        def __getattr__(self, name):
            def mock_method(*args, **kwargs):
                return None
            return mock_method
    
    pd = MockVisualization()
    plt = MockVisualization()
    sns = MockVisualization()
    np = MockVisualization()

# Importa√ß√µes principais do projeto
try:
    from puzzle import Puzzle, PuzzleGenerator, PuzzleValidator, InvalidPuzzleStateError
    from search.bfs import BFS
    from search.dfs import DFS
    from search.ids import IDS
    from search.astar import AStar
    from search.greedy import GreedySearch
    from utils.metrics import MetricsCollector, SearchMetrics
    from utils.tree_printer import TreePrinter
    from utils.analysis import (ComparisonAnalyzer, SearchTreeVisualizer, 
                              AlgorithmResult, ProblemInstance)
except ImportError as e:
    print(f"‚ùå Erro de importa√ß√£o do m√≥dulo principal: {e}")
    print("Certifique-se de que todos os m√≥dulos est√£o no diret√≥rio correto.")
    print("Estrutura esperada:")
    print("  n_puzzle_solver/")
    print("  ‚îú‚îÄ‚îÄ main.py")
    print("  ‚îú‚îÄ‚îÄ puzzle.py")
    print("  ‚îú‚îÄ‚îÄ search/")
    print("  ‚îÇ   ‚îú‚îÄ‚îÄ bfs.py")
    print("  ‚îÇ   ‚îú‚îÄ‚îÄ dfs.py")
    print("  ‚îÇ   ‚îî‚îÄ‚îÄ ...")
    print("  ‚îî‚îÄ‚îÄ utils/")
    sys.exit(1)


class NPuzzleSolver:
    """Classe principal do solucionador N-Puzzle com interface avan√ßada."""
    
    def __init__(self):
        """Inicializa o solucionador."""
        self.examples = self.load_examples()
        self.metrics_collector = MetricsCollector()
        self.tree_printer = TreePrinter()
        self.comparison_analyzer = ComparisonAnalyzer()
        self.tree_visualizer = SearchTreeVisualizer()
        self.current_puzzle = None
        self.last_solution = None
        self.algorithms = {
            '1': ('BFS', BFS),
            '2': ('DFS', DFS),
            '3': ('IDS', IDS),
            '4': ('A*', AStar),
            '5': ('Greedy', GreedySearch)
        }
        
        # Configura disponibilidade de funcionalidades
        self.visualization_enabled = VISUALIZATION_AVAILABLE
    
    def load_examples(self) -> Dict[str, Any]:
        """Carrega exemplos pr√©-definidos do arquivo JSON."""
        try:
            examples_path = Path('examples/examples.json')
            if examples_path.exists():
                with open(examples_path, 'r', encoding='utf-8') as f:
                    return json.load(f)
            else:
                return self.create_default_examples()
        except (json.JSONDecodeError, FileNotFoundError) as e:
            return self.create_default_examples()
    
    def create_default_examples(self) -> Dict[str, Any]:
        """Cria exemplos padr√£o caso o arquivo n√£o exista."""
        return {
            "8_puzzle": {
                "easy": {
                    "initial_state": [[1, 2, 3], [4, 5, 6], [7, 0, 8]],
                    "description": "Muito f√°cil - apenas um movimento"
                },
                "medium": {
                    "initial_state": [[1, 2, 3], [4, 0, 6], [7, 5, 8]],
                    "description": "M√©dio - alguns movimentos necess√°rios"
                },                "hard": {
                    "initial_state": [[2, 8, 3], [1, 6, 4], [7, 0, 5]],
                    "description": "Dif√≠cil - muitos movimentos necess√°rios"
                }
            }
        }
    
    def print_main_menu(self):
        """Exibe o menu principal aprimorado."""
        print("\n" + "üß©" + "="*48 + "üß©")
        print("         N-PUZZLE SOLVER v3.0")
        print("=" * 50)
        
        # Status das funcionalidades
        status_icon = "‚úÖ" if self.visualization_enabled else "‚ö†Ô∏è"
        status_text = "COMPLETO" if self.visualization_enabled else "B√ÅSICO"
        print(f"{status_icon} Modo: {status_text}")
        
        if not self.visualization_enabled:
            print("ÔøΩ Algumas funcionalidades limitadas (depend√™ncias autom√°ticas)")
        
        print("\nÔøΩüîç ALGORITMOS DE BUSCA:")
        print("  1. üîÑ Busca em Largura (BFS)")
        print("  2. ‚¨áÔ∏è  Busca em Profundidade (DFS)")
        print("  3. üîÅ Busca com Aprofundamento Iterativo (IDS)")
        print("  4. ‚≠ê Busca A* (com heur√≠sticas)")
        print("  5. üéØ Busca Gulosa")
        
        print("\n‚öôÔ∏è FUNCIONALIDADES:")
        print("  6. üìä Comparar Algoritmos")
        print("  7. üìÇ Carregar Exemplo")
        print("  8. üé≤ Gerar Puzzle Aleat√≥rio")
        print("  9. üé® Criar Puzzle Personalizado")
        print("  10. üìà Ver Estat√≠sticas")
        print("  11. üíæ Salvar/Carregar Estado")
        print("  12. üìã Gerar Relat√≥rio")
        
        # Funcionalidades avan√ßadas com indicadores
        viz_icon = "üìä" if self.visualization_enabled else "üìã"
        print(f"  13. {viz_icon} An√°lise Avan√ßada")
        print("  14. üå≥ Visualizar √Årvore")
        print(f"  15. {viz_icon} Exportar Dados")
        print("  16. ‚ùì Ajuda")
        
        print("\n  0. üö™ Sair")
        print("=" * 50)
        
        if self.current_puzzle:
            print(f"üìã Puzzle atual: {self.current_puzzle.size}x{self.current_puzzle.size}")
            print(f"üéØ √â objetivo: {'Sim' if self.current_puzzle.is_goal() else 'N√£o'}")
            print(f"‚úÖ Solucion√°vel: {'Sim' if self.current_puzzle.is_solvable() else 'N√£o'}")
    
    def get_puzzle_input(self) -> Optional[Puzzle]:
        """Obt√©m entrada do puzzle do usu√°rio com valida√ß√£o."""
        try:
            print("\nüîß CONFIGURANDO O PUZZLE:")
            print("Tamanhos suportados: 3 (8-puzzle), 4 (15-puzzle), 5 (24-puzzle)")
            
            while True:
                try:
                    size = int(input("üìè Digite o tamanho do puzzle (3-5): "))
                    if 3 <= size <= 5:
                        break
                    else:
                        print("‚ùå Tamanho deve estar entre 3 e 5.")
                except ValueError:
                    print("‚ùå Digite um n√∫mero v√°lido.")
            
            print(f"\nüìù Digite o estado inicial do {size*size-1}-puzzle:")
            print("üí° Dica: Use 0 para representar o espa√ßo vazio")
            print("üìã Formato: n√∫meros separados por espa√ßos")
            
            initial_state = []
            for i in range(size):
                while True:
                    try:
                        row_input = input(f"Linha {i+1}: ").strip()
                        row = list(map(int, row_input.split()))
                        
                        if len(row) != size:
                            print(f"‚ùå Digite exatamente {size} n√∫meros.")
                            continue
                        
                        initial_state.append(row)
                        break
                    except ValueError:
                        print("‚ùå Digite apenas n√∫meros separados por espa√ßos.")
            
            puzzle = Puzzle(initial_state)
            
            print(f"\n‚úÖ Puzzle criado com sucesso!")
            print(f"üìä Estado atual:\n{puzzle.visualize()}")
            
            if not puzzle.is_solvable():
                print("‚ö†Ô∏è ATEN√á√ÉO: Este puzzle n√£o √© solucion√°vel!")
                choice = input("Deseja continuar mesmo assim? (s/n): ").lower()
                if choice != 's':
                    return None
            
            return puzzle
            
        except InvalidPuzzleStateError as e:
            print(f"‚ùå Estado do puzzle inv√°lido: {e}")
            return None
        except Exception as e:
            print(f"‚ùå Erro inesperado: {e}")
            return None

    def run_single_algorithm(self, algorithm_choice: str, puzzle: Puzzle) -> bool:
        """
        Executa um √∫nico algoritmo no puzzle.
        
        Args:
            algorithm_choice: Escolha do algoritmo ('1'-'5')
            puzzle: Puzzle para resolver
            
        Returns:
            True se executou com sucesso, False caso contr√°rio
        """
        if algorithm_choice not in self.algorithms:
            print("‚ùå Algoritmo inv√°lido!")
            return False
        
        algo_name, algo_class = self.algorithms[algorithm_choice]
        
        try:
            print(f"\nüöÄ EXECUTANDO {algo_name}")
            print("=" * 30)
              # Configura√ß√µes especiais para alguns algoritmos
            if algorithm_choice == '4':  # A*
                heuristic = self.choose_heuristic()
                algorithm = algo_class(heuristic)
            elif algorithm_choice == '5':  # Greedy
                heuristic = self.choose_heuristic()
                algorithm = algo_class(heuristic)
            elif algorithm_choice == '2':  # DFS
                depth_limit = self.get_depth_limit()
                algorithm = algo_class(depth_limit)
            elif algorithm_choice == '3':  # IDS
                max_depth = self.get_max_depth()
                algorithm = algo_class(max_depth)
            else:
                algorithm = algo_class()
            
            # Ativa visualiza√ß√£o em tempo real automaticamente
            print("\nüé¨ VISUALIZA√á√ÉO EM TEMPO REAL ATIVADA!")
            print("üí° Dica: Pressione Ctrl+C para interromper se necess√°rio")
            
            # Configura√ß√£o autom√°tica de velocidade baseada no algoritmo
            auto_delay = self.get_auto_delay_for_algorithm(algorithm_choice)
            
            # Fun√ß√£o wrapper para compatibilidade com os algoritmos
            def visualization_callback(puzzle, nodes_explored=0, depth=0, message=""):
                return self.display_current_state(puzzle, nodes_explored, depth, message)
            
            algorithm.set_real_time_visualization(True, auto_delay, visualization_callback)
            
            # Pequena pausa para mostrar a mensagem
            import time
            time.sleep(2)
            
            # Executa o algoritmo
            self.metrics_collector.start_measurement()
            success, solution = algorithm.search(puzzle)
            metrics = self.metrics_collector.stop_measurement_and_record(algorithm, success, solution)
            
            # Exibe resultados
            self.display_results(success, solution, metrics, puzzle)
            
            # Registra resultado para an√°lise comparativa
            heuristic_name = None
            if algorithm_choice in ['4', '5']:  # A* e Greedy
                heuristic_name = getattr(algorithm, 'heuristic_name', 'manhattan')
            
            self.record_algorithm_result(algo_name, puzzle, success, solution, metrics, heuristic_name)
            
            if success:
                self.last_solution = solution
                
                # Pergunta se quer ver a √°rvore de busca
                if input("\nüå≥ Deseja ver a √°rvore de busca? (s/n): ").lower() == 's':
                    self.show_search_tree(puzzle, solution)
                
                # Pergunta se quer ver o caminho da solu√ß√£o
                if input("üõ§Ô∏è Deseja ver o caminho da solu√ß√£o passo a passo? (s/n): ").lower() == 's':
                    self.show_solution_path(puzzle, solution)
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro durante execu√ß√£o: {e}")
            return False
    
    def record_algorithm_result(self, algo_name: str, puzzle: Puzzle, success: bool, 
                               solution: List[str], metrics: SearchMetrics, heuristic_name: Optional[str] = None):
        """
        Registra resultado de algoritmo para an√°lise comparativa.
        
        Args:
            algo_name: Nome do algoritmo
            puzzle: Puzzle resolvido
            success: Se foi bem-sucedido
            solution: Solu√ß√£o encontrada
            metrics: M√©tricas coletadas
            heuristic_name: Nome da heur√≠stica (se aplic√°vel)
        """
        # Cria inst√¢ncia do problema se n√£o existir
        problem_name = f"puzzle_{puzzle.size}x{puzzle.size}"
        
        # Verifica se o problema j√° foi adicionado
        if not any(p.name == problem_name for p in self.comparison_analyzer.problems):
            problem_instance = ProblemInstance(
                name=problem_name,
                size=puzzle.size,
                initial_state=puzzle.state,
                difficulty="custom",
                description=f"Puzzle {puzzle.size}x{puzzle.size} personalizado"
            )
            self.comparison_analyzer.add_problem(problem_instance)
        
        # Cria resultado do algoritmo
        algorithm_result = AlgorithmResult(
            name=algo_name,
            success=success,
            execution_time=metrics.execution_time,
            nodes_explored=metrics.nodes_explored,
            solution_length=metrics.solution_length,
            max_depth=metrics.max_depth,
            memory_usage=metrics.memory_usage,
            heuristic=heuristic_name,
            optimal=metrics.optimal,
            solution_path=solution if success else None
        )
        
        # Adiciona resultado √† an√°lise comparativa
        self.comparison_analyzer.add_result(problem_name, algorithm_result)

    def get_auto_delay_for_algorithm(self, algorithm_choice: str) -> float:
        """Configura automaticamente o delay baseado no algoritmo escolhido."""
        # Velocidades otimizadas para cada algoritmo
        auto_delays = {
            '1': 0.8,   # BFS - moderado para ver a explora√ß√£o sistem√°tica
            '2': 1.0,   # DFS - um pouco mais lento para ver a profundidade
            '3': 0.6,   # IDS - mais r√°pido pois explora muito
            '4': 0.5,   # A* - r√°pido para mostrar efici√™ncia
            '5': 0.4    # Greedy - muito r√°pido para mostrar velocidade
        }
        
        delay = auto_delays.get(algorithm_choice, 0.5)
          # Informa ao usu√°rio a velocidade escolhida
        speed_names = {
            '1': 'Moderada (BFS explora sistematicamente)',
            '2': 'Lenta (DFS vai fundo)',  
            '3': 'R√°pida (IDS explora muito)',
            '4': 'Eficiente (A* √© inteligente)',
            '5': 'Muito R√°pida (Greedy √© veloz)'
        }
        
        algo_name = self.algorithms[algorithm_choice][0]
        speed_desc = speed_names.get(algorithm_choice, 'Padr√£o')
        print(f"‚ö° Velocidade autom√°tica para {algo_name}: {speed_desc}")
        
        return delay
    
    def get_visualization_delay(self) -> float:
        """Obt√©m o delay para visualiza√ß√£o em tempo real."""
        print("\n‚è±Ô∏è CONFIGURA√á√ÉO DE VELOCIDADE:")
        print("1. üêå Muito Lenta (2s por estado)")
        print("2. üê¢ Lenta (1s por estado)")
        print("3. üö∂ Normal (0.5s por estado)")
        print("4. üèÉ R√°pida (0.2s por estado)")
        print("5. üöÄ Muito R√°pida (0.1s por estado)")
        
        while True:
            choice = input("Escolha a velocidade (1-5): ").strip()
            delays = {'1': 2.0, '2': 1.0, '3': 0.5, '4': 0.2, '5': 0.1}
            if choice in delays:
                return delays[choice]
            else:
                print("‚ùå Escolha inv√°lida. Digite 1, 2, 3, 4 ou 5.")
    
    def display_current_state(self, puzzle, nodes_explored, depth, message=""):
        """Exibe o estado atual durante a busca em tempo real."""
        
        # Exibe apenas o estado do puzzle de forma simples e limpa
        puzzle_lines = puzzle.visualize(show_info=False).strip().split('\n')
        for line in puzzle_lines:
            print(line)
        print()  # Linha em branco para separar estados

    def choose_heuristic(self) -> str:
        """Permite ao usu√°rio escolher a heur√≠stica."""
        print("\nüéØ ESCOLHA DA HEUR√çSTICA:")
        print("1. Manhattan Distance (recomendada)")
        print("2. Misplaced Tiles")
        print("3. Linear Conflict")
        
        while True:
            choice = input("Escolha (1-3): ").strip()
            if choice == '1':
                return 'manhattan'
            elif choice == '2':
                return 'misplaced'
            elif choice == '3':
                return 'linear_conflict'
            else:
                print("‚ùå Escolha inv√°lida. Digite 1, 2 ou 3.")
    
    def get_depth_limit(self) -> int:
        """Obt√©m limite de profundidade para DFS."""
        while True:
            try:
                limit = int(input("üìè Digite o limite de profundidade para DFS (padr√£o: 50): ") or "50")
                if limit > 0:
                    return limit
                else:
                    print("‚ùå Limite deve ser positivo.")
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido.")
    
    def get_max_depth(self) -> int:
        """Obt√©m profundidade m√°xima para IDS."""
        while True:
            try:
                max_depth = int(input("üìè Digite a profundidade m√°xima para IDS (padr√£o: 50): ") or "50")
                if max_depth > 0:
                    return max_depth
                else:
                    print("‚ùå Profundidade deve ser positiva.")
            except ValueError:
                print("‚ùå Digite um n√∫mero v√°lido.")
    
    def display_results(self, success: bool, solution: List[str], metrics: SearchMetrics, puzzle: Puzzle):
        """Exibe os resultados da busca de forma organizada."""
        print("\n" + "üéØ" + "="*28 + "üéØ")
        print("         RESULTADOS")
        print("=" * 30)
        
        if success:
            print("‚úÖ SOLU√á√ÉO ENCONTRADA!")
            print(f"üéÆ Movimentos: {' ‚Üí '.join(solution) if solution else 'Nenhum'}")
            print(f"üìè Comprimento da solu√ß√£o: {len(solution)}")
        else:
            print("‚ùå SOLU√á√ÉO N√ÉO ENCONTRADA!")
        
        print(f"\nüìä M√âTRICAS DE PERFORMANCE:")
        print(f"‚è±Ô∏è  Tempo de execu√ß√£o: {metrics.execution_time:.4f}s")
        print(f"üîç N√≥s explorados: {metrics.nodes_explored:,}")
        print(f"üìä Profundidade m√°xima: {metrics.max_depth}")
        print(f"üíæ Uso de mem√≥ria: {metrics.memory_usage / 1024:.2f} KB")
        print(f"üéØ Solu√ß√£o √≥tima: {'Sim' if metrics.optimal else 'N√£o'}")
        
        if metrics.additional_info:
            print(f"\n‚ÑπÔ∏è INFORMA√á√ïES ADICIONAIS:")
            for key, value in metrics.additional_info.items():
                if key not in ['algorithm', 'nodes_explored', 'max_depth', 'solution_length', 'optimal']:
                    print(f"   {key}: {value}")
    
    def show_search_tree(self, initial_puzzle: Puzzle, solution: List[str]):
        """Mostra a √°rvore de busca (vers√£o simplificada)."""
        print("\nüå≥ √ÅRVORE DE BUSCA (Caminho da Solu√ß√£o):")
        print("=" * 40)
        
        tree_root = self.tree_printer.generate_solution_path_tree(solution, initial_puzzle)
        self.tree_printer.print_tree(tree_root, "Caminho da Solu√ß√£o")
    
    def show_solution_path(self, initial_puzzle: Puzzle, solution: List[str]):
        """Mostra o caminho da solu√ß√£o passo a passo."""
        print("\nüõ§Ô∏è CAMINHO DA SOLU√á√ÉO:")
        print("=" * 25)
        
        self.tree_printer.print_solution_path(solution, initial_puzzle)
    
    def compare_algorithms(self, puzzle: Puzzle):
        """Compara todos os algoritmos no mesmo puzzle com an√°lise completa."""
        if not puzzle:
            print("‚ùå Nenhum puzzle carregado para compara√ß√£o.")
            return
        
        print("\nüìä COMPARA√á√ÉO ABRANGENTE DE ALGORITMOS")
        print("=" * 45)
        print(f"üß© Puzzle: {puzzle.size}x{puzzle.size}")
        print(f"üéØ Solucion√°vel: {'Sim' if puzzle.is_solvable() else 'N√£o'}")
        print("üîÑ Executando todos os algoritmos...")
        
        # Configura√ß√£o de algoritmos para compara√ß√£o
        algorithms_config = [
            ('1', 'BFS', BFS, {}),
            ('2', 'DFS', DFS, {'depth_limit': 30}),
            ('3', 'IDS', IDS, {'max_depth': 30}),
            ('4', 'A*-Manhattan', AStar, {'heuristic': 'manhattan'}),
            ('4', 'A*-Misplaced', AStar, {'heuristic': 'misplaced'}),
            ('4', 'A*-Linear', AStar, {'heuristic': 'linear_conflict'}),
            ('5', 'Greedy-Manhattan', GreedySearch, {'heuristic': 'manhattan'}),
            ('5', 'Greedy-Misplaced', GreedySearch, {'heuristic': 'misplaced'})
        ]
        
        results = {}
        
        for choice, name, algo_class, config in algorithms_config:
            try:
                print(f"\n‚è≥ Testando {name}...")
                
                # Instancia algoritmo com configura√ß√£o
                if 'heuristic' in config:
                    algorithm = algo_class(config['heuristic'])
                elif 'depth_limit' in config:
                    algorithm = algo_class(config['depth_limit'])
                elif 'max_depth' in config:
                    algorithm = algo_class(config['max_depth'])
                else:
                    algorithm = algo_class()
                
                # Executa algoritmo
                self.metrics_collector.start_measurement()
                success, solution = algorithm.search(puzzle)
                metrics = self.metrics_collector.stop_measurement_and_record(algorithm, success, solution)
                
                # Registra resultado para an√°lise
                heuristic_name = config.get('heuristic', None)
                self.record_algorithm_result(name, puzzle, success, solution, metrics, heuristic_name)
                
                results[name] = {
                    'success': success,
                    'solution_length': len(solution) if success else 0,
                    'time': metrics.execution_time,
                    'nodes': metrics.nodes_explored,
                    'depth': metrics.max_depth,
                    'memory': metrics.memory_usage,
                    'optimal': metrics.optimal,
                    'heuristic': heuristic_name
                }
                
                status = "‚úÖ" if success else "‚ùå"
                if success:
                    print(f"{status} {name}: {len(solution)} movimentos, {metrics.execution_time:.4f}s, {metrics.nodes_explored} n√≥s")
                else:
                    print(f"{status} {name}: Falhou ap√≥s {metrics.execution_time:.4f}s")
                
            except Exception as e:
                print(f"‚ùå {name}: Erro - {e}")
                results[name] = {'success': False, 'error': str(e)}
        
        # Exibe an√°lise completa
        self.display_comprehensive_comparison(results)
    
    def display_comprehensive_comparison(self, results: Dict[str, Dict]):
        """Exibe an√°lise completa dos resultados de compara√ß√£o."""
        print("\nüèÜ AN√ÅLISE COMPLETA DOS RESULTADOS")
        print("=" * 40)
        
        successful = {name: data for name, data in results.items() if data.get('success', False)}
        failed = {name: data for name, data in results.items() if not data.get('success', False)}
        
        if not successful:
            print("‚ùå Nenhum algoritmo encontrou solu√ß√£o.")
            return
        
        # Estat√≠sticas gerais
        print(f"‚úÖ Algoritmos bem-sucedidos: {len(successful)}/{len(results)}")
        print(f"‚ùå Algoritmos que falharam: {len(failed)}")
        
        # Tabela de resultados
        print("\nüìä TABELA DE RESULTADOS:")
        print("-" * 85)
        print(f"{'Algoritmo':<18} {'Sucesso':<8} {'Movimentos':<10} {'Tempo(s)':<10} {'N√≥s':<8} {'√ìtimo':<8}")
        print("-" * 85)
        
        for name, data in results.items():
            if data.get('success', False):
                optimal_str = "Sim" if data['optimal'] else "N√£o"
                print(f"{name:<18} {'‚úÖ':<8} {data['solution_length']:<10} {data['time']:<10.4f} {data['nodes']:<8} {optimal_str:<8}")
            else:
                print(f"{name:<18} {'‚ùå':<8} {'N/A':<10} {'N/A':<10} {'N/A':<8} {'N/A':<8}")
        
        # Rankings
        print("\nüèÜ RANKINGS:")
        
        # Por velocidade
        time_ranking = sorted(successful.items(), key=lambda x: x[1]['time'])
        print("\n‚ö° Por Velocidade (Tempo):")
        for i, (name, data) in enumerate(time_ranking[:5], 1):
            print(f"  {i}. {name}: {data['time']:.4f}s")
        
        # Por efici√™ncia
        nodes_ranking = sorted(successful.items(), key=lambda x: x[1]['nodes'])
        print("\nüéØ Por Efici√™ncia (N√≥s Explorados):")
        for i, (name, data) in enumerate(nodes_ranking[:5], 1):
            print(f"  {i}. {name}: {data['nodes']} n√≥s")
        
        # Por otimalidade
        optimal_solutions = [data['solution_length'] for data in successful.values() if data['optimal']]
        if optimal_solutions:
            optimal_length = min(optimal_solutions)
            optimal_algos = [name for name, data in successful.items() 
                           if data['solution_length'] == optimal_length]
            print(f"\n‚ú® Solu√ß√£o √ìtima ({optimal_length} movimentos):")
            for algo in optimal_algos:
                print(f"  ‚Ä¢ {algo}")
        
        # An√°lise por categoria
        print("\nüìã AN√ÅLISE POR CATEGORIA:")
        
        uninformed = {name: data for name, data in successful.items() if name in ['BFS', 'DFS', 'IDS']}
        informed = {name: data for name, data in successful.items() if 'A*' in name or 'Greedy' in name}
        
        if uninformed:
            avg_time_uninformed = sum(data['time'] for data in uninformed.values()) / len(uninformed)
            avg_nodes_uninformed = sum(data['nodes'] for data in uninformed.values()) / len(uninformed)
            print(f"üîç Buscas Sem Informa√ß√£o: {avg_time_uninformed:.4f}s m√©dio, {avg_nodes_uninformed:.0f} n√≥s m√©dio")
        
        if informed:
            avg_time_informed = sum(data['time'] for data in informed.values()) / len(informed)
            avg_nodes_informed = sum(data['nodes'] for data in informed.values()) / len(informed)
            print(f"‚≠ê Buscas Com Informa√ß√£o: {avg_time_informed:.4f}s m√©dio, {avg_nodes_informed:.0f} n√≥s m√©dio")
        
        # Recomenda√ß√µes
        print("\nüí° RECOMENDA√á√ïES:")
        if len(successful) > 0:
            fastest = min(successful.items(), key=lambda x: x[1]['time'])
            most_efficient = min(successful.items(), key=lambda x: x[1]['nodes'])
            
            print(f"‚ö° Mais r√°pido: {fastest[0]} ({fastest[1]['time']:.4f}s)")
            print(f"üéØ Mais eficiente: {most_efficient[0]} ({most_efficient[1]['nodes']} n√≥s)")
            
            # Recomenda√ß√£o por tamanho do puzzle (usando puzzle atual)
            if self.current_puzzle:
                if self.current_puzzle.size == 3:
                    print("üìã Para puzzles 3x3: Todos os algoritmos s√£o vi√°veis")
                elif self.current_puzzle.size == 4:
                    print("üìã Para puzzles 4x4: Prefira algoritmos informados (A*, Greedy)")
                elif self.current_puzzle.size >= 5:
                    print("üìã Para puzzles 5x5+: Use apenas A* com heur√≠stica Manhattan")
        
        print("\n" + "="*40)
    
    def display_comparison_results(self, results: Dict[str, Dict]):
        """Exibe resultados da compara√ß√£o de algoritmos."""
        print("\nüèÜ RESULTADOS DA COMPARA√á√ÉO:")
        print("=" * 35)
        
        successful = {name: data for name, data in results.items() if data.get('success', False)}
        
        if not successful:
            print("‚ùå Nenhum algoritmo encontrou solu√ß√£o.")
            return
        
        # Ranking por tempo
        print("\n‚ö° RANKING POR VELOCIDADE:")
        time_ranking = sorted(successful.items(), key=lambda x: x[1]['time'])
        for i, (name, data) in enumerate(time_ranking, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "  "
            print(f"{medal} {i}¬∫ {name}: {data['time']:.4f}s")
        
        # Ranking por efici√™ncia (menos n√≥s)
        print("\nüß† RANKING POR EFICI√äNCIA (MENOS N√ìS):")
        nodes_ranking = sorted(successful.items(), key=lambda x: x[1]['nodes'])
        for i, (name, data) in enumerate(nodes_ranking, 1):
            medal = "ü•á" if i == 1 else "ü•à" if i == 2 else "ü•â" if i == 3 else "  "
            print(f"{medal} {i}¬∫ {name}: {data['nodes']:,} n√≥s")
        
        # Algoritmos √≥timos
        optimal_algos = [name for name, data in successful.items() if data.get('optimal', False)]
        if optimal_algos:
            print(f"\nüéØ ALGORITMOS COM SOLU√á√ÉO √ìTIMA: {', '.join(optimal_algos)}")
    
    def load_example_puzzle(self):
        """Carrega um puzzle de exemplo."""
        if not self.examples:
            print("‚ùå Nenhum exemplo dispon√≠vel.")
            return None
        
        print("\nüìÇ EXEMPLOS DISPON√çVEIS:")
        print("=" * 25)
        
        categories = list(self.examples.keys())
        for i, category in enumerate(categories, 1):
            print(f"{i}. {category.replace('_', '-').title()}")
        
        try:
            cat_choice = int(input("\nEscolha a categoria: ")) - 1
            if 0 <= cat_choice < len(categories):
                category = categories[cat_choice]
                
                difficulties = list(self.examples[category].keys())
                if 'description' in difficulties:
                    difficulties.remove('description')
                
                print(f"\nüìä DIFICULDADES DISPON√çVEIS ({category}):")
                for i, diff in enumerate(difficulties, 1):
                    desc = self.examples[category][diff].get('description', 'Sem descri√ß√£o')
                    print(f"{i}. {diff.title()}: {desc}")
                
                diff_choice = int(input("\nEscolha a dificuldade: ")) - 1
                if 0 <= diff_choice < len(difficulties):
                    difficulty = difficulties[diff_choice]
                    state = self.examples[category][difficulty]['initial_state']
                    
                    puzzle = Puzzle(state)
                    print(f"\n‚úÖ Exemplo carregado: {category} - {difficulty}")
                    print(f"üìä Estado:\n{puzzle.visualize()}")
                    
                    return puzzle
        
        except (ValueError, IndexError, KeyError) as e:
            print(f"‚ùå Erro ao carregar exemplo: {e}")
        
        return None
    
    def generate_random_puzzle(self):
        """Gera um puzzle aleat√≥rio."""
        print("\nüé≤ GERADOR DE PUZZLE ALEAT√ìRIO")
        print("=" * 32)
        
        try:
            while True:
                size = int(input("üìè Tamanho do puzzle (3-5): "))
                if 3 <= size <= 5:
                    break
                print("‚ùå Tamanho deve estar entre 3 e 5.")
            
            print("üîÑ Gerando puzzle aleat√≥rio...")
            puzzle = Puzzle.create_random(size)
            
            print(f"‚úÖ Puzzle {size}x{size} gerado com sucesso!")
            print(f"üìä Estado:\n{puzzle.visualize()}")
            
            return puzzle
            
        except Exception as e:
            print(f"‚ùå Erro ao gerar puzzle: {e}")
            return None
    
    def save_state(self, puzzle: Puzzle):
        """Salva o estado atual em arquivo."""
        try:
            filename = input("üíæ Nome do arquivo (sem extens√£o): ").strip()
            if not filename:
                filename = f"puzzle_state_{int(time.time())}"
            
            filepath = f"{filename}.json"
            data = puzzle.to_dict()
            
            with open(filepath, 'w', encoding='utf-8') as f:
                json.dump(data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Estado salvo em: {filepath}")
            
        except Exception as e:
            print(f"‚ùå Erro ao salvar: {e}")
    
    def load_state(self):
        """Carrega estado de arquivo."""
        try:
            filename = input("üìÇ Nome do arquivo (com ou sem extens√£o): ").strip()
            if not filename.endswith('.json'):
                filename += '.json'
            
            if not os.path.exists(filename):
                print(f"‚ùå Arquivo n√£o encontrado: {filename}")
                return None
            
            with open(filename, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            puzzle = Puzzle.from_dict(data)
            print(f"‚úÖ Estado carregado de: {filename}")
            print(f"üìä Estado:\n{puzzle.visualize()}")
            
            return puzzle
            
        except Exception as e:
            print(f"‚ùå Erro ao carregar: {e}")
            return None
    
    def show_statistics(self):
        """Mostra estat√≠sticas dos algoritmos executados."""
        if not self.metrics_collector.metrics_history:
            print("‚ùå Nenhuma estat√≠stica dispon√≠vel. Execute alguns algoritmos primeiro.")
            return
        
        print("\nüìà ESTAT√çSTICAS GERAIS")
        print("=" * 25)
        
        report = self.metrics_collector.get_comparison_report()
        
        if 'error' in report:
            print(f"‚ùå {report['error']}")
            return
        
        print(f"üìä Total de execu√ß√µes: {report['total_runs']}")
        print(f"‚úÖ Execu√ß√µes bem-sucedidas: {report['successful_runs']}")
        print(f"üîß Algoritmos testados: {', '.join(report['algorithms_tested'])}")
        
        print(f"\nüèÜ PERFORMANCE POR ALGORITMO:")
        for algo, stats in report['performance_summary'].items():
            print(f"\nüìã {algo}:")
            print(f"   Execu√ß√µes: {stats['runs']}")
            print(f"   Tempo m√©dio: {stats['avg_execution_time']:.4f}s")
            print(f"   N√≥s m√©dios: {stats['avg_nodes_explored']:.0f}")
            print(f"   Solu√ß√£o m√©dia: {stats['avg_solution_length']:.1f} movimentos")
            print(f"   Solu√ß√µes √≥timas: {stats['optimal_solutions']}")
          # Op√ß√£o de exportar
        if input("\nüíæ Deseja exportar estat√≠sticas para CSV? (s/n): ").lower() == 's':
            filename = f"statistics_{int(time.time())}.csv"
            self.metrics_collector.export_to_csv(filename)
    
    def run(self):
        """Executa o loop principal do programa."""        
        while True:
            try:
                self.print_main_menu()
                choice = input("\nüéØ Escolha uma op√ß√£o: ").strip()
                
                if choice == '0':
                    self.exit_program()
                    break
                elif choice in ['1', '2', '3', '4', '5']:
                    self.handle_algorithm_choice(choice)
                elif choice == '6':
                    self.handle_comparison()
                elif choice == '7':
                    self.handle_load_example()
                elif choice == '8':
                    self.handle_random_puzzle()
                elif choice == '9':
                    self.handle_custom_puzzle()
                elif choice == '10':
                    self.show_statistics()
                elif choice == '11':
                    self.handle_save_load()
                elif choice == '12':
                    self.handle_generate_report()
                elif choice == '13':
                    self.handle_advanced_analysis()
                elif choice == '14':
                    self.handle_tree_visualization()
                elif choice == '15':
                    self.handle_export_data()
                elif choice == '16':
                    self.show_help()
                else:
                    print("‚ùå Op√ß√£o inv√°lida! Tente novamente.")
                
                if choice != '0':
                    input("\n‚èé Pressione Enter para continuar...")
                    
            except KeyboardInterrupt:
                print("\n\nüõë Interrompido pelo usu√°rio.")
                self.exit_program()
                break
            except Exception as e:
                print(f"\n‚ùå Erro inesperado: {e}")
                input("‚èé Pressione Enter para continuar...")
    
    def handle_algorithm_choice(self, choice: str):
        """Lida com a escolha de algoritmo."""
        if not self.current_puzzle:
            print("‚ùå Nenhum puzzle carregado!")
            print("üí° Carregue um exemplo (op√ß√£o 7) ou crie um puzzle (op√ß√£o 9).")
            return
        
        self.run_single_algorithm(choice, self.current_puzzle)
    
    def handle_comparison(self):
        """Lida com a compara√ß√£o de algoritmos."""
        if not self.current_puzzle:
            print("‚ùå Nenhum puzzle carregado para compara√ß√£o!")
            print("üí° Carregue um exemplo (op√ß√£o 7) ou crie um puzzle (op√ß√£o 9).")
            return
        
        print("‚ö†Ô∏è A compara√ß√£o pode demorar para puzzles complexos.")
        if input("Continuar? (s/n): ").lower() == 's':
            self.compare_algorithms(self.current_puzzle)
    
    def handle_load_example(self):
        """Lida com o carregamento de exemplo."""
        puzzle = self.load_example_puzzle()
        if puzzle:
            self.current_puzzle = puzzle
    
    def handle_random_puzzle(self):
        """Lida com a gera√ß√£o de puzzle aleat√≥rio."""
        puzzle = self.generate_random_puzzle()
        if puzzle:
            self.current_puzzle = puzzle
    
    def handle_custom_puzzle(self):
        """Lida com a cria√ß√£o de puzzle personalizado."""
        puzzle = self.get_puzzle_input()
        if puzzle:
            self.current_puzzle = puzzle
    
    def handle_save_load(self):
        """Lida com salvar/carregar estado."""
        print("\nüíæ SALVAR/CARREGAR ESTADO:")
        print("1. üíæ Salvar estado atual")
        print("2. üìÇ Carregar estado")
        
        choice = input("Escolha (1-2): ").strip()
        
        if choice == '1':
            if self.current_puzzle:
                self.save_state(self.current_puzzle)
            else:
                print("‚ùå Nenhum puzzle carregado para salvar.")
        elif choice == '2':
            puzzle = self.load_state()
            if puzzle:
                self.current_puzzle = puzzle
        else:
            print("‚ùå Op√ß√£o inv√°lida.")
    
    def handle_advanced_analysis(self):
        """Gerencia an√°lise comparativa avan√ßada."""
        if not self.comparison_analyzer.results:
            print("‚ùå Nenhum resultado de compara√ß√£o dispon√≠vel!")
            print("üí° Execute compara√ß√µes de algoritmos primeiro (op√ß√£o 6).")
            return
        
        print("\nüîç AN√ÅLISE COMPARATIVA AVAN√áADA")
        print("=" * 40)
        print("1. üìä Tabela Comparativa Detalhada")
        print("2. üìà Resumo de Performance")
        print("3. üèÜ Rankings de Algoritmos")  
        print("4. üí° Conclus√µes e Recomenda√ß√µes")
        print("5. üìã Relat√≥rio Completo")
        
        choice = input("\nEscolha uma op√ß√£o (1-5): ").strip()
        
        if choice == '1':
            print(self.comparison_analyzer.generate_comparison_table())
        elif choice == '2':
            print(self.comparison_analyzer.generate_performance_summary())
        elif choice == '3':
            print(self.comparison_analyzer.generate_algorithm_ranking())
        elif choice == '4':
            print(self.comparison_analyzer._generate_conclusions())
        elif choice == '5':
            print(self.comparison_analyzer.generate_detailed_report())
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
    
    def handle_generate_report(self):
        """Gera relat√≥rio completo de an√°lise."""
        if not self.comparison_analyzer.results:
            print("‚ùå Nenhum resultado para relat√≥rio!")
            print("üí° Execute alguns algoritmos primeiro.")
            return
        
        print("\nüìã GERA√á√ÉO DE RELAT√ìRIO")
        print("=" * 30)
        
        # Exibe relat√≥rio na tela
        report = self.comparison_analyzer.generate_detailed_report()
        print(report)
        
        # Pergunta se quer salvar
        save_choice = input("\nüíæ Deseja salvar o relat√≥rio em arquivo? (s/n): ").lower()
        if save_choice == 's':
            result = self.comparison_analyzer.save_report()
            print(result)
    
    def handle_tree_visualization(self):
        """Gerencia visualiza√ß√£o de √°rvores de busca."""
        if not self.last_solution:
            print("‚ùå Nenhuma solu√ß√£o dispon√≠vel para visualizar!")
            print("üí° Execute um algoritmo primeiro.")
            return
        
        if not self.current_puzzle:
            print("‚ùå Puzzle atual n√£o dispon√≠vel!")
            return
        
        print("\nüå≥ VISUALIZA√á√ÉO DA √ÅRVORE DE BUSCA")
        print("=" * 40)
        
        # Gera visualiza√ß√£o da √°rvore
        tree_repr = self.tree_visualizer.generate_tree_representation(
            self.current_puzzle, self.last_solution
        )
        print(tree_repr)
        
        # An√°lise do caminho
        print("\n" + "="*50)
        path_analysis = self.tree_visualizer.generate_path_analysis(
            self.current_puzzle, self.last_solution
        )
        print(path_analysis)
    
    def export_basic_json(self):
        """Exporta dados b√°sicos em JSON quando pandas n√£o est√° dispon√≠vel."""
        try:
            timestamp = int(time.time())
            filename = f"n_puzzle_results_{timestamp}.json"
            
            # Coleta dados b√°sicos
            basic_data = {
                "timestamp": datetime.now().isoformat(),
                "total_results": len(getattr(self.comparison_analyzer, 'results', {})),
                "algorithms_tested": list(getattr(self.comparison_analyzer, 'results', {}).keys()),
                "export_type": "basic_json_export",
                "note": "Para exporta√ß√£o completa, todas as depend√™ncias foram instaladas automaticamente"
            }
            
            # Adiciona dados se dispon√≠veis
            if hasattr(self.comparison_analyzer, 'results'):
                basic_data["results"] = self.comparison_analyzer.results
            
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(basic_data, f, indent=2, ensure_ascii=False)
            
            print(f"‚úÖ Dados b√°sicos exportados para: {filename}")
            
        except Exception as e:
            print(f"‚ùå Erro na exporta√ß√£o: {e}")
    
    def handle_export_data(self):
        """Gerencia exporta√ß√£o de dados com tratamento autom√°tico de depend√™ncias."""
        if not hasattr(self, 'comparison_analyzer') or not self.comparison_analyzer.results:
            print("‚ùå Nenhum dado para exportar!")
            print("üí° Execute compara√ß√µes de algoritmos primeiro.")
            return
        
        print("\nüìä EXPORTA√á√ÉO DE DADOS")
        print("=" * 30)
        
        if not self.visualization_enabled:
            print("‚ö†Ô∏è Modo de exporta√ß√£o limitado")
            print("üìÑ Exporta√ß√£o dispon√≠vel: JSON b√°sico")
            
            choice = input("Deseja exportar dados b√°sicos em JSON? (s/n): ").lower()
            if choice == 's':
                self.export_basic_json()
            return
        
        # Menu completo para quando as bibliotecas est√£o dispon√≠veis
        print("1. üìÑ Exportar dados em JSON")
        print("2. üìä Gerar gr√°ficos de performance")
        print("3. üì¶ Exportar tudo (dados + gr√°ficos)")
        
        choice = input("\nEscolha uma op√ß√£o (1-3): ").strip()
        
        if choice == '1':
            result = self.comparison_analyzer.export_data_json()
            print(result)
        elif choice == '2':
            result = self.comparison_analyzer.create_performance_plots()
            print(result)
        elif choice == '3':
            json_result = self.comparison_analyzer.export_data_json()
            plots_result = self.comparison_analyzer.create_performance_plots()
            print(json_result)
            print(plots_result)
        else:
            print("‚ùå Op√ß√£o inv√°lida!")
    
    def show_help(self):
        """Mostra ajuda com informa√ß√µes sobre depend√™ncias."""
        print("\n‚ùì AJUDA - N-PUZZLE SOLVER")
        print("=" * 30)
        
        print("üß© SOBRE O SISTEMA:")
        print("  ‚Ä¢ Resolve puzzles deslizantes (8, 15, 24 pe√ßas)")
        print("  ‚Ä¢ 5 algoritmos de busca implementados")
        print("  ‚Ä¢ An√°lise comparativa de performance")
        print("  ‚Ä¢ Instala√ß√£o autom√°tica de depend√™ncias")
        
        print("\nüîß FUNCIONALIDADES:")
        print("  ‚úÖ Sempre dispon√≠veis:")
        print("     ‚Ä¢ Resolu√ß√£o de puzzles")
        print("     ‚Ä¢ Compara√ß√£o b√°sica de algoritmos")
        print("     ‚Ä¢ Visualiza√ß√£o textual de √°rvores")
        print("     ‚Ä¢ Exporta√ß√£o b√°sica em JSON")
        
        if self.visualization_enabled:
            print("  ‚úÖ Funcionalidades avan√ßadas ativas:")
            print("     ‚Ä¢ Gr√°ficos de performance")
            print("     ‚Ä¢ An√°lise estat√≠stica detalhada")
            print("     ‚Ä¢ Exporta√ß√£o completa de dados")
            print("     ‚Ä¢ Visualiza√ß√µes interativas")
        else:
            print("  ‚ö†Ô∏è Funcionalidades limitadas:")
            print("     ‚Ä¢ Gr√°ficos n√£o dispon√≠veis")
            print("     ‚Ä¢ An√°lise estat√≠stica b√°sica")
            print("     ‚Ä¢ Exporta√ß√£o limitada")
            
            print("\nüì¶ INSTALA√á√ÉO AUTOM√ÅTICA:")
            print("   O sistema tentou instalar automaticamente:")
            print("   pandas, matplotlib, seaborn, numpy")
            print("   Se ainda h√° problemas, tente manualmente:")
            print("   pip install pandas matplotlib seaborn numpy")
        
        print("\nüéØ ALGORITMOS:")
        print("  ‚Ä¢ BFS: √ìtimo, usa mais mem√≥ria")
        print("  ‚Ä¢ DFS: R√°pido, pode ser sub√≥timo")
        print("  ‚Ä¢ IDS: Combina BFS e DFS")
        print("  ‚Ä¢ A*: Muito eficiente com heur√≠sticas")
        print("  ‚Ä¢ Greedy: R√°pido, segue heur√≠stica")
        
        print("\nüí° DICAS:")
        print("  1. Comece com exemplos simples")
        print("  2. Use A* para puzzles grandes")
        print("  3. Compare algoritmos para aprender")
        print("  4. Verifique se o puzzle √© solucion√°vel")
    
    def exit_program(self):
        """Encerra o programa com mensagem de despedida."""
        print("\nüéâ OBRIGADO POR USAR O N-PUZZLE SOLVER!")
        print("=" * 40)
        
        if hasattr(self, 'metrics_collector') and self.metrics_collector.metrics_history:
            total_runs = len(self.metrics_collector.metrics_history)
            print(f"üìä Total de execu√ß√µes: {total_runs}")
            
            successful_runs = sum(1 for m in self.metrics_collector.metrics_history if m.success)
            print(f"‚úÖ Execu√ß√µes bem-sucedidas: {successful_runs}")
            
            if successful_runs > 0:
                avg_time = sum(m.execution_time for m in self.metrics_collector.metrics_history if m.success) / successful_runs
                print(f"‚è±Ô∏è Tempo m√©dio: {avg_time:.4f}s")
        
        print("\nüí° Dicas para pr√≥xima vez:")
        print("  ‚Ä¢ Experimente diferentes algoritmos")
        print("  ‚Ä¢ Compare performance entre eles")
        print("  ‚Ä¢ Tente puzzles de diferentes tamanhos")
        
        if not self.visualization_enabled:
            print("  ‚Ä¢ Depend√™ncias foram instaladas automaticamente")
        
        print("\nüëã At√© a pr√≥xima!")

if __name__ == "__main__":
    try:
        solver = NPuzzleSolver()
        solver.run()
    except KeyboardInterrupt:
        print("\n\nüëã Programa encerrado pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro inesperado: {e}")
